<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on Multicore Programming Spring 2020</title><link>https://lukeluocn.github.io/multicoresysu2020/</link><description>Recent content in Home on Multicore Programming Spring 2020</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://lukeluocn.github.io/multicoresysu2020/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://lukeluocn.github.io/multicoresysu2020/assets/scaffold-hw2/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lukeluocn.github.io/multicoresysu2020/assets/scaffold-hw2/readme/</guid><description>Scaffold for hw2 How about the layout of the test samples? In each test sample, there exist three parts:
the first part contains the meta data of the sample; the second part contains the search points; and the third part contains the reference points. To be more specific, we give a simple example containing only two search points and two reference points in 3-dimensional space:
k = 3 m = 1 n = 2 searchPoints = [ 1.</description></item><item><title/><link>https://lukeluocn.github.io/multicoresysu2020/assets/scaffold/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lukeluocn.github.io/multicoresysu2020/assets/scaffold/readme/</guid><description>Scaffold for hw1 What is it? This is a scaffold for your hw1, including:
a bunch of sample data to test against; the utilities to read-in the samples and write-out your results; a full project structure with CMakeLists.txt for writing your CUDA program. More details can be found in the source code files.
How to use it? You typically just need to modify sources/src/core.h and sources/src/core.cu. Currently, these two source code files contain a demonstrating example but the example has nothing to do with the requirements of hw1.</description></item><item><title/><link>https://lukeluocn.github.io/multicoresysu2020/cuda-exec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lukeluocn.github.io/multicoresysu2020/cuda-exec/</guid><description>A Brief Guide to the rexec Utility (The utility will be offline after 2020.07.29.)
The rexec utility is still on its early development stage and is far from stable. The usage guide is also a work in progress.
Besides, we would make the rexec utility project open soon.
Preliminaries Docker Installation Windows (other than home editions): Docker Desktop for Windows macOS: Docker Desktop for Mac Linux: Docker CE Pull the Image for Local Compilation This image contains the full CUDA 10.</description></item><item><title/><link>https://lukeluocn.github.io/multicoresysu2020/jupyterhub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lukeluocn.github.io/multicoresysu2020/jupyterhub/</guid><description>A Brief Guide to the JupyterHub Platform (The platform would be unavailable for this course after 2020.07.29.)
First log in to http://jupyterhub.vickytse.cn/ (remember that you might have to set-up the VPN connection first).
Step 0.1 If you encounter the Server Options page, select CUDA devel notebook and continue.
Step 0.2 If you are using the shared account, create a folder for yourself first (you are free to use any folder names you like).</description></item><item><title>About</title><link>https://lukeluocn.github.io/multicoresysu2020/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lukeluocn.github.io/multicoresysu2020/about/</guid><description>Get in contact with our teaching assistant Clearly described problems, thoughtful discussions, appropriate requests like asking for slip days, and useful suggestions are always welcome! Don&amp;rsquo;t hesitate to get in contact with our teaching assistant and he is always reachable via email: luok7[at]mail2.sysu.edu.cn. You will be very likely to get bonus by contributing more interactions (though we don&amp;rsquo;t have strict rules for it).
But even if you are uncertain about the quality of your questions, just feel free to send him an email.</description></item><item><title>Assignments</title><link>https://lukeluocn.github.io/multicoresysu2020/assignments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lukeluocn.github.io/multicoresysu2020/assignments/</guid><description>HW1 Requirements: Slides Project template with sample data: Scaffold HW2 Requirements: Slides Project template with sample data generator: Scaffold</description></item><item><title>MD5 Generator</title><link>https://lukeluocn.github.io/multicoresysu2020/md5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lukeluocn.github.io/multicoresysu2020/md5/</guid><description> function updateMD5() { var user = document.getElementById("user").value; var pass = document.getElementById("pass").value; document.getElementById("md5code").innerText = md5(user + pass); } Username: Password: # MD5 code</description></item><item><title>Syllabus</title><link>https://lukeluocn.github.io/multicoresysu2020/syllabus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lukeluocn.github.io/multicoresysu2020/syllabus/</guid><description> Topic Slides and Supplementary Materials Introduction Slides C/C++ Basics Slides OpenMP Basics Slides CUDA Programming Slides CUDA Memory Slides Thread Model and Atomic Operations Slides Parallel Programming Patterns Slides Performance Optimization Slides</description></item></channel></rss>